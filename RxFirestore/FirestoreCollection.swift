//
//  FirestoreCollection.swift
//  DonationPointMe
//
//  Created by KD Chen on 22/6/18.
//  Copyright Â© 2018 Quest Payment Systems. All rights reserved.
//

import FirebaseCore
import FirebaseFirestore

typealias TypedCollectionPath <T: SnapshotCodable>   = (CollectionReference, T.Type)
typealias TypedDocumentPath <T: SnapshotCodable>     = (DocumentReference, T.Type)

protocol FirestoreCollection {

    /**
     A unique read-only Firestore key of the document.
     If key is empty when writing back to Firestore, a new key will be auto-generated by Firestore
     and this document will be saved as a new document.
     */
    var key: String { get }
    /**
     The collection name as defined in firesotre console
     */
    static var collectionName: String { get }
    
    static func collectionPath<T: SnapshotCodable>(_ type: T.Type) -> TypedCollectionPath<T>
    static func documentPath<T: SnapshotCodable>(_ type: T.Type, key: String) -> TypedDocumentPath<T>
    func getDocument<T: SnapshotCodable>(_ type: T.Type) -> TypedDocumentPath<T>
}

extension FirestoreCollection {
    /**
     Returns a tuple of a CollectionReference and an associated model type
     */
    static func collectionPath<T: SnapshotCodable>(_ type: T.Type) -> TypedCollectionPath<T> {
        return (Firestore.firestore().collection(collectionName), type)
    }
    
    /**
     Returns a tuple of a DocumentReference (given a document ID in this collection) and an associated model type
     */
    static func documentPath<T: SnapshotCodable>(_ type: T.Type, key: String) -> TypedDocumentPath<T> {
        return  key.isEmpty ?
                (Self.collectionPath(type).0.document(), type) :
                (Self.collectionPath(type).0.document(key), type)
    }
    
    /**
     Returns a tuple of a DocumentReference (from self) and an associated model type
     */
    func getDocument<T: SnapshotCodable>(_ type: T.Type) -> TypedDocumentPath<T> {
        return Self.documentPath(type, key: key)
    }
}
